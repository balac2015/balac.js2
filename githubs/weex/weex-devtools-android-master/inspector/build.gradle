buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
    }
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
}

apply plugin: 'com.android.library'


android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-consumer.pro'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    // compile 'commons-cli:commons-cli:1.2'
    provided 'com.google.code.findbugs:jsr305:2.0.1'
    provided 'com.android.support:appcompat-v7:23.1.1'
    // optional
    testCompile 'junit:junit:4.12'
    testCompile('org.robolectric:robolectric:2.4') {
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
    }
    testCompile 'org.powermock:powermock-api-mockito:1.6.1'
    testCompile 'org.powermock:powermock-module-junit4:1.6.1'
    //compile project(':weex_sdk')
    provided 'com.taobao.android:weex_sdk:0.9.5'
    provided 'com.alibaba:fastjson:1.1.46.android'
//    provided 'com.squareup.okio:okio:1.6.0'
//    compile 'com.squareup.okhttp3:okhttp:3.4.1'
//    compile 'com.squareup.okhttp3:okhttp-ws:3.4.1'
//    compile 'com.squareup.okhttp:okhttp:2.3.0'
//    compile 'com.squareup.okhttp:okhttp-ws:2.3.0'
    provided 'com.taobao.android.weex_inspection:protocol:1.0.2'
}

//apply from: rootProject.file('release.gradle')

android.libraryVariants.all { variant ->
    def name = variant.name.capitalize()

    // Ugly kludge to rename license files in the bundled commons-cli
    // dependency so that they do not appear to describe Stetho's license.
//    configurations.compile.each {
//        if (it.getName() == 'commons-cli-1.2.jar') {
//            def depJarPath = it.getPath()
//            task "tidyCommonsCli${name}"(type: Copy) {
//                from zipTree(depJarPath)
//                into "build/commons-cli-tidy-${name}"
//                rename 'LICENSE', 'commons-cli-LICENSE'
//                rename 'NOTICE', 'commons-cli-NOTICE'
//            }
//        }
//    }

    task "metainf${name}"(type: Copy) {
        from rootProject.file('LICENSE')
        into "build/metainf-${name}/META-INF"
    }

    task "fatjar${name}"(type: Jar, dependsOn: [ "jar${name}", "tidyCommonsCli${name}", "metainf${name}" ]) {
        classifier = 'fatjar'
        from variant.javaCompile.destinationDir
        from "build/commons-cli-tidy-${name}"
        from "build/metainf-${name}"
    }
}