!function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){var i=n(17),r=n(18),o=n(19);__weex_define__("@weex-component/2db5b02b2b2467ace4cdd68021452568",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r}),__weex_bootstrap__("@weex-component/2db5b02b2b2467ace4cdd68021452568",void 0,void 0)},function(t,e,n){var i=n(2),r=n(3),o=n(4);__weex_define__("@weex-component/unit",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["unit-box"],children:[{type:"text",classList:["unit-number"],style:{fontSize:function(){return this.numberSize}},attr:{value:function(){return this.number}}},{type:"text",classList:["unit-text"],attr:{value:function(){return this.label}}}]}},function(t,e){t.exports={"unit-box":{flexDirection:"row",justifyContent:"center",alignItems:"flex-end"},"unit-number":{display:"inline-block",fontSize:50,color:"#111111"},"unit-text":{fontSize:22,color:"#333333",paddingLeft:20,justifyContent:"flex-end",alignItems:"flex-end"}}},function(t,e){t.exports=function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={}}},function(t,e){t.exports={type:"div",classList:["list"],children:[{type:"div",classList:["item"],repeat:{expression:function(){return this.data},value:"item"},children:[{type:"div",classList:["item-distance"],children:[{type:"unit",attr:{number:function(){return this.item.distance},label:"千米"}}]},{type:"div",classList:["item-time-info"],children:[{type:"unit",style:{flex:1},attr:{numberSize:"24",number:function(){return this.item.time},label:"分钟"}},{type:"unit",style:{flex:1},attr:{numberSize:"24",number:function(){return this.item.date},label:""}}]}]}]}},function(t,e){t.exports={item:{padding:20,borderTopWidth:1,borderTopColor:"#cccccc",flexDirection:"row"},"item-distance":{flex:1,justifyContent:"flex-start",alignItems:"flex-start"},"item-time-info":{flex:1,flexDirection:"row",justifyContent:"flex-end",alignItems:"flex-end"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(1),e.default={}}},,,,function(t,e){t.exports={type:"div",classList:["navbar-con"],children:[{type:"div",classList:["navbar"],children:[{type:"div",classList:["btn-back"],shown:function(){return!this.hideReturn},events:{click:"goHome"},children:[{type:"image",classList:["btn-arrow-left"],attr:{src:"http://img1.vued.vanthink.cn/vued9c8e7e738ff94abee23eb69d7f1401e9.png"}},{type:"text",classList:["btn-text"],attr:{value:"返回"}}]},{type:"text",classList:["title"],attr:{value:function(){return this.title}}}]}]}},function(t,e){t.exports={"navbar-con":{height:108},navbar:{zIndex:1e3,position:"relative",display:"flex",flexDirection:"row",height:88,backgroundColor:"#ffffff",alignItems:"center",borderBottomWidth:2,borderBottomColor:"#dddddd"},"btn-back":{zIndex:1002,flexDirection:"row",alignItems:"center",width:180,height:88},"btn-arrow-left":{width:60,height:60,marginLeft:10},"btn-text":{color:"#0f89f5"},title:{position:"absolute",left:180,right:180,top:0,height:88,lineHeight:88,fontSize:36,textAlign:"center"}}},function(t,e){t.exports=function(t,e,n){"use strict";var i=n("@weex-module/navigator");t.exports={methods:{goHome:function(){i.pop()}}}}},,,,function(t,e){t.exports={type:"scroller",classList:["container"],children:[{type:"navbar",attr:{hideReturn:"true",title:"weex-sports"}},{type:"text",classList:["title"],attr:{value:"我的运动"}},{type:"div",classList:["data-container"],children:[{type:"div",classList:["data-circle"],children:[{type:"div",classList:["total-distance"],children:[{type:"text",classList:["total-label"],attr:{value:"运行总距离"}},{type:"text",classList:["total-number"],attr:{value:function(){return this.total.distance}}},{type:"text",attr:{value:"公里"}}]},{type:"div",classList:["btn-go"],events:{click:"go"},children:[{type:"text",classList:["btn-go-text"],attr:{value:"开始跑步"}}]}]},{type:"div",classList:["data-dashboard"],children:[{type:"div",classList:["data-dashboard-item"],children:[{type:"text",classList:["data-dashboard-label"],attr:{value:"热量"}},{type:"div",classList:["unit-box"],children:[{type:"text",classList:["unit-number"],attr:{value:function(){return this.total.calories}}},{type:"text",classList:["unit-text"],attr:{value:"千卡"}}]}]},{type:"div",classList:["data-dashboard-item"],children:[{type:"text",classList:["data-dashboard-label"],attr:{value:"时间"}},{type:"div",classList:["unit-box"],children:[{type:"text",classList:["unit-number"],attr:{value:function(){return this.total.time}}},{type:"text",classList:["unit-text"],attr:{value:"分钟"}}]}]}]}]},{type:"div",classList:["history-center"],children:[{type:"text",attr:{value:"历史记录"}},{type:"div",classList:["list"],children:[{type:"div",classList:["item"],repeat:{expression:function(){return this.historyData},value:"item"},attr:{index:function(){return this.$index}},events:{click:function(t){this.viewData(this.$index,t)}},children:[{type:"div",classList:["item-distance"],children:[{type:"unit",attr:{number:function(){return this.item.miles},label:"千米"}}]},{type:"div",classList:["item-time-info"],children:[{type:"unit",style:{flex:1},attr:{numberSize:"24",number:function(){return this.item.time},label:""}},{type:"unit",style:{flex:1},attr:{numberSize:"24",number:function(){return this.item.date},label:""}}]}]}]}]},{type:"text",classList:["footer"],attr:{value:"Powered By Weex"}}]}},function(t,e){t.exports={container:{position:"relative",flex:1,backgroundColor:"#eeeeee"},title:{fontSize:45,padding:20,justifyContent:"center",alignItems:"center",color:"#e74c3c",backgroundColor:"#ffffff"},"data-container":{padding:20,borderBottomColor:"#dddddd",borderBottomWidth:2,backgroundColor:"#ffffff",justifyContent:"center"},"data-circle":{alignItems:"center"},"btn-go":{width:400,padding:20,marginTop:60,backgroundColor:"#FF4E50",borderWidth:4,borderColor:"#ffffff",borderRadius:10,alignItems:"center"},"btn-go-text":{color:"#ffffff"},"data-dashboard":{borderTopColor:"#dddddd",borderTopWidth:2,marginTop:20,flexDirection:"row"},"data-dashboard-item":{flex:1,alignItems:"center"},"data-dashboard-label":{fontSize:24,color:"#999999",paddingTop:20},"history-center":{padding:20,marginTop:40,marginBottom:20,backgroundColor:"#ffffff",borderBottomColor:"#dddddd",borderBottomWidth:2},item:{padding:20,borderTopWidth:1,borderTopColor:"#cccccc",flexDirection:"row"},"item-distance":{flex:1,justifyContent:"flex-start",alignItems:"flex-start"},"item-time-info":{flex:1,flexDirection:"row",justifyContent:"flex-end",alignItems:"flex-end"},footer:{fontSize:16,color:"#999999",padding:20,alignItems:"center"},"unit-box":{flexDirection:"row",justifyContent:"center",alignItems:"flex-end"},"unit-number":{display:"inline-block",fontSize:50,color:"#111111"},"unit-text":{fontSize:22,color:"#333333",paddingLeft:20,justifyContent:"flex-end",alignItems:"flex-end"},"total-distance":{width:400,alignItems:"center",justifyContent:"center"},"total-label":{fontSize:30,color:"#999999"},"total-number":{fontSize:120}}},function(t,e,n){t.exports=function(t,e,i){"use strict";n(20),n(21);var r=n(22),o=i("@weex-module/navigator"),a=i("@weex-module/storage");t.exports={data:function(){return{total:{distance:0,calories:0,time:0},plan:{distance:30},historyData:[]}},methods:{go:function(){var t=this.$getConfig().bundleUrl;o.push({url:r.setBundleUrl(t,"running.js")})},viewData:function(t){var e=this.$getConfig().bundleUrl;o.push({url:r.setBundleUrl(e,"running.js?index="+t)})}},created:function(){var t=this;a.getItem("runningData",function(e){if("success"==e.result)try{var n=JSON.parse(e.data);t.historyData=n,t.total.distance=r.calcTotal(n,"miles"),console.log(t.total.distance),t.total.calories=r.calcTotal(n,"calories"),t.total.time=r.setTimeFormat(r.calcTotal(n,"seconds"))}catch(t){console.log("parse error ")}})}}}},function(t,e,n){var i=n(11),r=n(12),o=n(13);__weex_define__("@weex-component/navbar",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e,n){n(1);var i=n(5),r=n(6),o=n(7);__weex_define__("@weex-component/list",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){"use strict";t.exports={calcTotal:function(t,e){var n=0;return t.forEach(function(t){n+=e?1*t[e]:t}),n},setTimeFormat:function(t){var e=this.setZero(Math.floor(t/3600)),n=this.setZero(Math.floor(t%3600/60)),i=this.setZero(t%60);return e+":"+n+":"+i},kmtom:function(t){return(t/1e3).toFixed(2)},getDate:function(){var t=new Date,e=t.getFullYear()+"-"+("0"+(1+t.getMonth())).slice("-2")+"-"+("0"+t.getDate()).slice(-2)+" "+("0"+t.getHours()).slice(-2)+":"+("0"+t.getMinutes()).slice(-2);return e},setZero:function(t){return t<10?"0"+t:t},calcSpeed:function(t,e){return(t/e*3.6).toFixed(2)},setPosition:function(t){var e=t.length,n=0,i=0;return t.forEach(function(t){n+=t[1],i+=t[0]}),[(i/e).toFixed(6),(n/e).toFixed(6)]},extend:function(t,e){for(var n in e)try{e[n].constructor===Object?t[n]=this.extend(t[n],e[n]):t[n]=e[n]}catch(i){t[n]=e[n]}return t},setBundleUrl:function(t,e){var n=t,i="",r="",o=void 0,a=n.indexOf("your_current_IP")>=0||n.indexOf("file://assets/")>=0,s=n.indexOf("file:///")>=0&&n.indexOf("WeexDemo.app")>0;if(a)o="file://assets/dist";else if(s)o=n.substring(0,n.lastIndexOf("/")+1);else{var l=/\/\/([^\/]+?)\//.exec(n),c=/\/\/.+\/([^\/]+?)\//.exec(n);l&&l.length>=2&&(i=l[1]),c&&c.length>=2&&(r=c[1]),o="http://"+i+"/"}var d="./index.html?page=",u=o;u="undefined"==typeof navigator||"Mozilla"!==navigator.appCodeName&&"Gecko"!==navigator.product?o+r+"/":"web"===r||"dist"===r?d+"/dist/":d+"";var f=u+e;return f},getUrlParam:function(t,e){var n=new RegExp("[?|&]"+e+"=([^&]+)"),i=t.match(n);return i&&i[1]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,